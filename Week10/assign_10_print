-----------------------------ASSIGN_10_1---------------------------------

!************************************************************************
!Author : Navrit Bal
!Student Number : 12958319
!Creation Date : 18/03/2013
!Assignment Number : 10_1
!Purpose : Attempt to calculate PI via stochastic methods and comparison
!			to the real value of PI
!************************************************************************

PROGRAM assign_10_1
	IMPLICIT NONE
	
	! Declaration of variables block
	INTEGER :: choice, i, j, circle
	INTEGER, DIMENSION(4) :: seeds
	DOUBLE PRECISION :: n, x, y, PI_comp, PI_proper, percent
	
	! Gets user input for seed information for the random number function
	WRITE(*,*) 'How many seeds numbers would you like to input?'
	WRITE(*,*) 'You may choose 1 or 4 ONLY'
	READ(*,*) choice
	
	IF (choice == 1) THEN
		WRITE(*,*) 'Enter 1 integer for the seeds'
		READ(*,*) seeds(1)
		! Expands the seed array using the first index
		DO i = 2, 4
			seeds(i) = (seeds(i-1)+66)**1.1
		END DO
	ELSEIF (choice == 4) THEN
		! Reads in all seed values sequentially
		WRITE(*,*) 'Enter 4 integers for the seeds on different lines' 
		DO i = 1, 4
			READ(*,*) seeds(i)
		END DO
	ELSE
		! Invalid user input handling
		WRITE(*,*) 'ERROR'
		WRITE(*,*) 'Please only write 1 or 4'
		READ(*,*)
		STOP
	END IF
	
	! Gets the number of iterations to run the DO loop below
	WRITE(*,*) 'Number of iterations? Must be more than 1'
	READ(*,*) n
	! Calls random seed subroutine and modifies the seeds array
	CALL RANDOM_SEED(PUT = seeds)
	
	DO i = 1, n
		! Generates random numbers
		CALL RANDOM_NUMBER(x)
		CALL RANDOM_NUMBER(y)
		! Checks to see if those points are in the circle
		IF (((x**2) + (y**2)) < 1.0) THEN
			circle = circle + 1
		END IF
	END DO
	
	! Computes the value of PI according to this stochastic method
	!	along with the accurate version
	PI_comp = ( 4.0 * (circle/n) )
	PI_proper = ( 4.0 * ATAN(1.0) )
	! Calculates the percentage difference
	percent = ( ((PI_comp/PI_proper)*100)-100 )
	
	! Writes out the relevant results
	WRITE(*,*) 'Pi has been computed to be :', PI_comp
	WRITE(*,*) 'Pi is actually :', PI_proper
	WRITE(*,'(A,F18.14," %")') 'Percentage difference : ', percent
	
END PROGRAM assign_10_1


-----------------------------ASSIGN_10_1.NOTES---------------------------
-----------------
 Number of iterations? Must be more than 1
1000
 Pi has been computed to be :   3.22400000000000
 Pi is actually :   3.14159274101257
Percentage difference :   2.62310444990608 %

real    0m4.079s
user    0m0.010s
sys     0m0.000s
-----------------
 Number of iterations? Must be more than 1
10000
 Pi has been computed to be :   3.17320000000000
 Pi is actually :   3.14159274101257
Percentage difference :   1.00609027308994 %

real    0m8.908s
user    0m0.010s
sys     0m0.010s
-----------------
 Number of iterations? Must be more than 1
100000
 Pi has been computed to be :   3.14560000000000
 Pi is actually :   3.14159274101257
Percentage difference :   0.12755501167014 %

real    0m6.667s
user    0m0.070s
sys     0m0.010s
-----------------
 Number of iterations? Must be more than 1
1000000
 Pi has been computed to be :   3.14128000000000
 Pi is actually :   3.14159274101257
Percentage difference :  -0.00995485533470 %

real    0m7.154s
user    0m0.630s
sys     0m0.000s
------------------------------------------------------------------------

This algorithm is of the time complexity of O(n) - Order n and therefore
 is a linear algorithm. Therefore if 10 times the previous input is 
 given, it would be reasonable to expect the program to take around 10
 times as long to execute as before. 
This is observed from 10,000 to 1,000,000 iterations with both the 
 length of execution and the percentage error reduction.
Changing the seed does not appaear to majorly affect the time taken or 
 the percentage differences.


-----------------------------ASSIGN_10_2---------------------------------

!************************************************************************
!Author : Navrit Bal
!Student Number : 12958319
!Creation Date : 19/03/2013
!Assignment Number : 10_2
!Purpose: Find the square root of a number using the Newton-Raphson 
!			method
!************************************************************************

PROGRAM assign_10_2
	IMPLICIT NONE
	
	! Variable declaration block
	DOUBLE PRECISION	:: x, num, xold
	INTEGER 			:: n, i
	
	! Gets necessary user input
	WRITE(*,*)'Which number would you like to calculate the square root&
				& of?'
	READ (*,*) num
	WRITE(*,*)'Initial guess?'
	READ (*,*) x
	WRITE(*,*) 'How many iterations?'
	READ (*,*) n
	WRITE(*,*) '\n'
	
	!Opens the file 'assign_10_2.out' in unit number 99
	OPEN (99,FILE='assign_10_2.out')
	! Writes information header to the file 'assign_10_2.out'
	WRITE(99,'(A,F0.14)') 'Number to find the square root of (num) : &
						   &', num
	WRITE(99,'(A,F0.14)') 'Initial guess (X) : ', x
	WRITE(99,'(A,I0)') 'Number of iterations (n) : ', n
	WRITE(99,'(A)') 'Xn+1 =  X - ( ((X**2)-num)/(2*X) )'
	WRITE(99,'(A)') '\n i  X \t\t\t        Xn+1'
	! Writes header to the screen
	WRITE (*,'(A)') '\n i  X \t\t\tXn+1'
	
	! Calculates the next iteration using the Newton-Raphson method
	!   and writes the computed data to the file and screen in a 
	!   tabular format
	DO i = 1, n
		xold = x
		x = ( x - ( ((x**2)-num)/(2*x) ) )
		WRITE (*,'(X,I0,A,F0.14,A,F0.14)') i,'  ',xold,'\t', x
		WRITE(99,'(X,I0,A,F0.14,A,F0.14)') i,'  ',xold,'\t', x
	END DO
	
	! Closes 'assign_10_2.out'
	CLOSE(99)
	
END PROGRAM assign_10_2


-----------------------------ASSIGN_10_2.OUT-----------------------------

Number to find the square root of (num) : 187.25999999999999
Initial guess (X) : 200.00000000000000
Number of iterations (n) : 10
Xn+1 =  X - ( ((X**2)-num)/(2*X) )

 i  X 			        Xn+1
 1  200.00000000000000	100.46815000000001
 2  100.46815000000001	51.16601213629644
 3  51.16601213629644	27.41293175691575
 4  27.41293175691575	17.12200715767107
 5  17.12200715767107	14.02940451675078
 6  14.02940451675078	13.68854218424024
 7  13.68854218424024	13.68429822866920
 8  13.68429822866920	13.68429757057338
 9  13.68429757057338	13.68429757057336
 10  13.68429757057336	13.68429757057336

